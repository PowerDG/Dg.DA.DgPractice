# [Repository 仓储，你的归宿究竟在哪？](https://www.cnblogs.com/xishuai/p/ddd_repository.html)



https://www.cnblogs.com/xishuai/p/ddd_repository.html

https://www.cnblogs.com/xishuai/p/3934412.html

https://www.cnblogs.com/xishuai/p/3947897.html

## （一）－仓储的概念

## 写在前面

![img](111513192642643.jpg)

写这篇博文的灵感来自《[如何开始DDD(完)](http://www.cnblogs.com/younghan/p/3892598.html)》，很感谢young.han兄这几天的坚持，陆陆续续写了几篇有关于领域驱动设计的博文，让园中再次刮了一阵“DDD探讨风”，我现在不像前段时间那样“疯狂”了，写博文需要灵感，就像这篇一样。那篇博文除去其他的一些问题探讨，留给我印象最深的就是：领域服务中使用仓储，下面摘自文中我的一段评论：

> 1. 领域服务中去调用仓储，这一点是我一直所纠结的地方，我现在做的项目是领域服务中是不参杂着仓储的，这个操作是在应用层中，比如：_userRepository.Add(user);
> 2. 兄台接下来说的观点，首先要明确一点的是：仓储应不应该在领域服务中进行调用？？？我上次写了那篇文章，其实到最后也没讨论出个结果，反正我现在所做的是，领域服务不实现仓储调用。你可以结合测试驱动开发就知道没什么了，DDD＋TDD，其实领域模型最好的业务体现是在哪？不是在领域模型，而是领域模型的单元测试，它是很好的描述这个业务用例，如果你的领域模型的单元测试出了问题，那就是领域模型出了问题，其实兄台可以试着写下你这个业务场景下的领域模型的单元测试，也就是一个业务用例的单元测试，看看会发生什么？还有就是应用层的伪代码。

文中Luminji兄这样回复我：“领域服务不用仓储，那我们怎么单元测试领域服务？仅此一点，就说明领域服务必用仓储。反之，倒是上层，如**控制器这里不应该用仓储**。”其实原本大家的焦点不应该放在仓储上面的，而应该放在领域驱动设计的**核心－领域模型**上，为此我还曾写了几篇关于领域模型设计的博文，但是一个完整的应用程序不只是包含领域模型，还有其他的东西需要进行探讨，虽然它不像领域模型那么重要，但同样必不可少。

Luminji兄的评论，让我意识到需要把领域驱动设计中的其他概念明确探讨下了，如果对一些概念模糊不清，或者不能很好的明确其职责，这样就很容易导致我们在领域驱动设计的过程中陷入一些困境，就像我之前所掉进的坑－《[设计窘境：来自 Repository 的一丝线索，Domain Model 再重新设计](http://www.cnblogs.com/xishuai/p/domain_model_repository.html)》。

以下内容只是个人对仓储概念及其问题进行探讨，并非是结论总结，仅供各位仁兄参考。

## 《实现领域驱动设计》

![img](111511339362764.jpg)

在进行正文探讨之前，我先啰嗦几句。

《实现领域驱动设计》这本书，我在之前觉得没必要阅读，因为当时认为学习领域驱动设计，只要精读下 Eric Evans  的经典著作《领域驱动设计－软件核心复杂性应对之道》就可以了，但是DDD是需要进行实践的，Eric Evans  只是提出领域驱动设计这个概念，**有关于其实现**，书中并没有花很大的精力去讲解，而《实现领域驱动设计》这本书正是弥补了这一点。

这两本书的阅读顺序，当然是先阅读《领域驱动设计》，然后再阅读《实现领域驱动设计》，如果你是第一次读第一本书，它会颠覆你对软件设计的一些看法，然后让你不能自拔的“爱上它”，不知道你有没有，反正我是这样，然后你在做一些应用程序设计的时候，会尝试使用领域驱动设计，虽然有些步履蹒跚，但是走出第一步是很重要的。关于阅读第二本书，我的建议是，在阅读之前，先根据第一本书中的指导，自己尝试去实践领域驱动设计，最好是做一些实际业务场景的应用，在这个过程中，完全按照自己对领域驱动设计的想法去实现，虽然可能会掉进一些深坑，但是我觉得只有这样你才会理解的更加深刻。至于为什么自己实践过领域驱动设计再去阅读第二本书？因为实践过后阅读的话，你会与作者产生一些共鸣，这是很奇妙的感觉，就像译者－腾云这样所说：

![img](111025397175020.png)

《实现领域驱动设计》这本书，我现在也只读了第十二章－资源库（译者把 Repository  翻译为资源库，和仓储是一个意思，我更喜欢**仓储这个名词，后面就用它来表示 Repository  了**），阅读仓储这一章的时候，我是带着问题进行阅读的，也就是仓储的职责是什么？它的归宿究竟在哪？但是很可惜，我在这一章节中并没有找到我要寻找的答案，因为作者主要讲解的是仓储的实现，但是我发现了其他一些有意思的东西，下面希望和各位仁兄分享下（或许有点偏离主题了，但是我觉得应该会蛮有意义的）。

## 仓储（Repository） VS 数据访问对象（DAO）

![img](111508122482015.png)

有关于仓储的概念，我不止在一篇博文中进行说明，但是这边既然和数据访问对象进行比较的话，还是要声明一下，下面来自《领域驱动设计》书中的定义：

> Repository（仓储）：**协调领域和数据映射层**，利用**类似与集合的接口**来访问领域对象。

也可以像 dudu 这样进行直白的理解：Repository 是一个独立的层，介于领域层与数据映射层（数据访问层）之间。它的存在让领域层感觉不到数据访问层的存在，它提供一个类似集合的接口提供给领域层进行领域对象的访问。**Repository 是仓库管理员，领域层需要什么东西只需告诉仓库管理员，由仓库管理员把东西拿给它，并不需要知道东西实际放在哪。**

仓储是领域驱动设计中产生的概念，也就是说，如果你的应用程序不是基于领域驱动设计的，那在设计中使用仓储是不是有点不伦不类呢？首先，就像 Eric Evans 所定义中明确的那样：协调领域和数据映射层，两个关键字**领域**和**数据映射层**，这里面的领域是指领域模型（实体和值对象），这是桥的一头，另一头就是数据映射层，也就是我们常说的  ORM 工具，在 .NET 领域也就是我们常用的 EntityFramework，很多人认为 EntityFramework  就包含仓储，好像之前有人发表过博文阐述过这个问题，但是你看下仓储的定义，就会发现这不是一个概念的问题。除了这两个关键词，还有一个动词就是**协调**，仓储协调的是什么？怎么协调的？这个概念需要明确下，桥的一头－领域模型（主要是实体对象），这个就不多说了，桥的另一头－ORM（对象关系映射），因为我们大部分情况下使用的是关系型数据库，如何对数据进行管理？当然  DAO 是一种（这边先不多说），还有就是使用 ORM，它可以让你很方便的进行数据和对象映射转换，如果你的项目是基于**事务脚本模式**设计的，那就没必要使用 ORM 工具了，因为使用简单的 SQL 更合适，说了这么多，好像都没说到重点，其实仓储协调的是 ORM 中的“O”，也就是对象的概念，**它是在数据映射层之上的，是一种概念，而不是一种实现，这个概念很重要。**

有时候，仓储和数据访问对象会当作同义词来看待，因为他们都**提供了对持久化机制的抽象**，在 DAO 中比较好理解，仓储中的持久化机制主要体现在  ORM 中，但是这并不属于仓储，更不属于 DAO，所以有时候我们认为所有的持久化抽象称为  DAO，并不是很准确，我们需要确定的是这种模式是否得到了真正的实现。

仓储和 DAO 是不同的，一个 DAO 主要从数据库表的角度来看待问题，并且提供 **CRUD  操作，这种模式适用于事务脚本程序中**，这是因为，这些与 DAO  相关的模式通常只是对数据库表的一层封装。而另一方面，仓储和数据影射器（ORM）则更加偏向于对象，因此通常被用于领域模型中。

还有一点内容就是存储过程的探讨，在《实现领域驱动设计》书中，作者也提到了，他**不建议我们在基于领域驱动设计的应用中去使用存储过程**，因为我们的建模团队并不能很好的理解存储过程所使用的语言，此外，通常来说他们也看不到存储过程的实现，而这些都是有饽于  DDD 目标的，但是有时候使用存储过程是为了程序性能，这是一个取舍的问题，就像我们使用 ORM  一样，我们需要对这个概念进行明确清楚，以防止我们在领域驱动设计的过程中参杂一些其他的东西。

有关仓储和数据访问对象的探讨，最后的结论是，通常来说，你可以将仓储当作 DAO 来看待，但是请注意一点，在设计仓储时，我们应该采用面向集合的方式，而不是面向数据访问的方式。这有助于你将自己的领域当作模型来看待，而不是 CRUD 操作。

以下几段话来自netfocus兄：

> 1. 仓储是面向领域的，仓储定义的目的不是db驱动的，仓储管理的数据的最小粒度是聚合根，这两点和DAO有很大不同；
> 2. 仓储用于实现聚合的生命周期，聚合创建后，如果不用了，会放回仓储，需要用时，再从仓储取出来（也就是唤醒聚合的意思）；所以仓储就是聚合的温床。按照仓储的定义，它是一个集合，所以我们只会为仓储提供类似集合的接口，比如Add，Remove，Get这种操作；因为集合没有Save的说法，所以仓储上不需要有Save，更不会有Commit，也不会有Delete等概念。因为是集合，所以可以理解为一个无限大的内存空间，我们不关心集合是否太大，也不关心背后的持久化，这些不是DDD该思考的东西，我们可以用Dapper来实现，也可以用Mongo，也可以用EF。
> 3. Save, Delete, Commit这些都是持久化的概念，最多在应用层表达。

## 关于仓储（Repository），你必须知道的几个概念。

### 1，仓储的两种设计方式：面向集合和面向持久化

面向集合和面向持久化，这两种类型的仓储设计方式，在《实现领域驱动设计》中有很详细的讲解，作者还附带了几个具体的实现，比如  Hibernate 实现、TopLink  实现等等，这个必须赞一个，感兴趣的朋友，可以进行阅读下。这面我简单说明下，这两种设计方式的不同之处，举个最直白的例子。

面向集合方式：

```
this.UserRepository.Add(user);
```

面向持久化方式：

```
this.UserRepository.Save(user);
```

可能很多朋友看到这，会不以为然，需要明确一点，在领域驱动设计中，不论是变量或是方法的命名规则都非常重要，因为其代码就是代表着一种通用语言，你要让人家可以看懂。在面向集合方式中，新对象的添加使用的是  Add，而在面向持久化方式中，不论是新对象的添加或是修改，都是使用的 Save，如果是基于 Unit Of Work（工作单元），会有  Commit。

### 2，不允许同一聚合实例多次添加到仓储中

关于这一点其实很多人都知道，因为聚合存在唯一性，仓储是管理它的集合，所以不可能在集合中存在多个同一聚合。另外在面向集合方式实现中，当从仓储中获取一个对象并对其进行修改时，我们并不需要“重新保存”该对象到仓储中，因为集合维护了对该对象的引用，而修改将直接作用在该对象上。

### 3，仓储实现方法返回类型建议为 void

我们在定义仓储接口的时候，一般会这样定义：

```
bool Add(TAggregateRoot aggregateRoot);
```

比如添加聚合实例的方法返回值为 bool 类型，但是有时候返回 true  并不一定代表着该聚合实例成功添加到仓储中了，因此，对于仓储来说，返回 void  可能会是更好的方式。那如何判断该聚合实例成功添加到仓储中了呢？我们一般会在仓储实现中进行异常捕获，这一点内容，在书中有讲解，我们可以自定义异常信息，友好的抛出一个异常。

### 4，对聚合实例的批量操作，最好不要使用 addAll() 和 removeAll() 方法

有时候我们在单个事务中，对多个聚合实例进行添加或删除的时候，为了方便，我们会使用 addAll() 和 removeAll() 方法，但是，我们使用这种方式，并不能对单个聚合实例操作进行监控，建议方式是循环调用 add() 和 remove() 方法。

### 5，聚合中删除聚合实例的正确表达是什么？

有时候，在应用程序设计中，对实例对象的生命周期管理就代表着其业务逻辑的体现，我们一般在设计中删除对象使用的是  delete，具体表现是从数据库中直接将数据删除掉，这是在事务脚本中的实现方式，在领域驱动设计中，其实是不存在对象删除这一说法的，正确的表达应该是，将聚合实例标记为失活的（disabled），不可用的（unusable），也就是说在仓储所涵盖的内容里面，最好不要出现  delete，至于数据库具体持久化中的 delete，这个就不在仓储的概念之中了。

### 6，仓储在各层中的位置存放

在书中，作者是这样表述的：我们将仓储接口定义放在了与聚合相同的包中（书中所有的示例都是用 java 实现的），而将仓储中的实现类放在了 impl 子包中，这种方式被大量的 java 项目所采用，然而，在协作上下文中，团队成员们，将实现类放在了基础设施层中。

这一点我是和作者持相同观点，比如下面的解决方案：

![img](111403536235416.png)

### 7，仓储中的级联删除所引出的问题

关于这个问题，其实我也不是很理解，下面引自作者的一段话（P375）：

> 有人可能会依赖于ORM所提供的生命周期事件来完成对象的级联删除。我刻意地没有使用这种方式，因为我强烈反对由聚合来管理持久化，同时我强烈地提倡只使用资源库来处理持久化。当然，有关这两者的争论非常激烈，并且还在继续。因此，在选择时，你需要多方权衡。但是请记住，DDD专家是不会首先考虑使用聚合来管理持久化的。

根据我的猜测，大概是这样的意思，主要是仓储的持久化管理，一种是使用 ORM  攻击所提供的持久化机制，这种方式就使得仓储依赖于这些技术的实现，但是可以为我们在实现仓储的时候省去很多事，比如我们使用  EntityFramework，你会发现我们在实现仓储的时候，变得异常简单。还有一种方式就是作者提到的，建议让仓储自身去实现持久化机制，但是这种方式实现起来比较复杂，我也没具体的找到其实现方法，这边就不多说。

### 8，Unit Of Work（工作单元）的使用

只需要记住一点：当 Unit Of Work 中的 commit() 方法执行时，所有发生在对象上的修改都将提交到数据库中。

### 9，count() or size()?

我们有时候计算聚合实例的总数，一般会将实现方法命名为 count()，但是因为仓储应该尽可能的模拟一个集合，因此建议接口定义如下：

```
int Size();
```

命名规则是我们在软件开发过程中，最容易忽略的一点，可能在一般的开发过程中不注意会没事，但是在领域驱动设计中，就像之前所表述的那样，代码代表着一种语言，不光是自己能看懂，还要让需求人员可以看懂，至少可以从名字上知道其代表的意思，这一点很重要。

### 10，聚合根下的子聚合正确方式

有时，如果我们要获取聚合根下的某些子聚合，我们不用先从资源库中获取到聚合根，然后再从聚合根中获取这些子聚合，而是可以直接从资源库中返回。在有些情况下，这种做法是有好处的。比如，某个聚合根拥有一个很大的实体类型集合，而你需要根据某种查询条件返回该集合中的一部分实体。当然，只有在聚合根中提供了对该实体集合的导航时，我们才能这么做，否则，我们便违背了聚合的设计原则。我建议不要因为客户端的方便而提供这种访问方式。更多的时候，采用这种方式是由于性能上的考虑，比如从聚合根中访问子聚合将带来性能瓶颈的时候。此时的查找方法和其他查找方法具有相同的基本特征，只是它直接返回聚合根下的子聚合，而不是聚合根本身。无论如何，请慎重使用这种方式。

以上是书中作者的观点描述，其实最终也没有表述出一个正确的方式，只是说直接访问子聚合，作者不建议这样做，但是有时候为了一些性能问题，我们又不得不权衡利弊一下。除了这个问题之外，还有一个就是仓储执行完查询后，有时候会返回多个聚合的查询结果对象，这个我们一般会将查询结果放在一个值对象中。

### 11，CQRS 模式引入

对于 CQRS  模式，我没有深入研究过，更没有实践应用过，我的想法是先去把经典DDD理解透，然后再去尝试其他东西，毕竟路要一步一步走，CQRS 模式是对 DDD  的一种很好补充，也就是说它的产生是有一定的理由的，对于领域驱动设计初学者，我个人不建议，一开始就使用 CQRS 模式。

当我们使用用例优化查询时，有时候我们必须创建多个查询方法，什么意思？就是跨聚合查询，这可能意味着你的聚合边界划分的有问题，如果你确定你的聚合边界划分没有问题，那你应该考虑使用  CQRS 模式了，它的应用场景就是这样，凡事都有产生的原因，如果你的应用程序没有很复杂的查询操作，我个人觉得，完全没必要使用 CQRS  模式，有时候不要为了实现而实现。

### 12，共享仓储

对于这个概念，我没有深入研究过，作者也只是提出了一个思考，这边也不多说，思考如下：

为不同的聚合类型提供单独的资源库究竟给我们带来了什么好处？在聚合子类较少的情况下，为它们使用单独的资源库可能是最好的方式。但是，随着聚合子类数目的增加，而同时它们又具有完全的可互换性时，使用一个共享的资源库便更合适了。

## 写在最后

本来想一篇博文写完了事，但是看了下内容，写了还蛮多的，其实都还没说到重点上，只是大致讲述了仓储的概念，为防止大家看得累，那分为上下篇来进行讲解。

下篇主要对：**仓储，你的归宿究竟在哪？**这个问题进行探讨，内容主要包含其职责及调用场景的可行性探讨，具体用代码来验证。

 





## [（二）－这样的应用层代码，你能接受吗？](https://www.cnblogs.com/xishuai/p/3934412.html)

## 写在前面

关于“Repository 仓储，你的归宿究竟在哪？”这个系列，本来是想写个上下篇，但是现在觉得，很有多东西需要明确，我也不知道接下来会写多少篇，所以上一篇的标题就改成了《[Repository 仓储，你的归宿究竟在哪？（一）－仓储的概念](http://www.cnblogs.com/xishuai/p/ddd_repository.html)》，在这篇博文中，主要讲了仓储的概念，并没有探讨有关仓储归宿的任何东西，但你发现，后面评论中的探讨会比博文内容更有价值，这也是我所坚持写博文的目的之一，也就是分享的价值。

上一篇博文评论中，大部分内容是我和 czcz1024 探讨“Specification－规约”，我也不知道怎么会扯到这个话题上了，就像 netfocus 兄最后所说：有点偏离主题了。确实如此，本来我觉得这一篇博文也就这样了，但是最后刘标才给我回复：

> 我想问下，领域模型里面到底要不要去引用仓储接口呢，好像ddd那个关系图里面是可以调用的，如果实体不引用的话，一些复杂的逻辑在实体里面根本无法实现，或者只能被分割成2部分，一部分在实体，一部分在appcation中，appcation中的一般是查询方法；比如有一个登记的业务方法（其实就是insert了），在登记前需要判断当前年份的金额是否大于登记实体的金额，大于那么可以登记，否则异常，类似这样的业务，判断查询那个到底是在实体里面判断还是在appcation里面判断呢，如果是实体的话，那么仓储接口怎么注入到实体，实体是new出来的？？？？

如果不嫌多，我再贴出一段：

> 这个问题我已经纠结很久了，还没有看到具体是怎么样实现的，stackoverflow里面也有很多老外在讨论，但也没有最终的答案，大部分人认为没有必要在实体或者聚合中使用仓储（或者注入仓储）；我个人认为是一定要的，先不说这样做对不对，我们可以根据项目的实践去看问题，很多业务都需要判断一下是否唯一，面积或者金额之类的是否足够，这些都是需要查询才可以得到值的，如果是放在application去实现，就等于把这些业务转移到了上层，而且随着业务的复杂度增加，这样的实现就会很多，如果放在领域层实现，看起来是很不错的选择，但是实体或者聚合里面怎么去注入仓储接口呢，实体和聚合都是被new出来的，看起来是没有办法注入了，只能在实体里面调用XXX注入类.GetInstance<仓储接口>()；这样的话领域层就要依赖某个注入框架了，所以这个仓储问题，不管放哪都不那么完美。

我当时看到这段回复的时候，我觉得我找到知音了，为什么？因为只有实践过，你才会感同身受，大道理说一大堆，不去实践应用，这种问题你不会发现的，更不会去思考怎么解决？

## 我为什么认死理，非要探讨仓储的归宿？

其实关于这个问题，netfocus 兄看到，应该会非常无语（哈哈），因为早在《[设计窘境：来自 Repository 的一丝线索，Domain Model 再重新设计](http://www.cnblogs.com/xishuai/p/domain_model_repository.html)》这篇博文中，我和他就曾探讨过，当然还有之后其他的一些交流，他的意思是：为什么非要纠结在仓储这一块？如果职责划分的比较明确及正确，那该怎么使用就怎么使用，不管是应用层或是领域中，只要符合，那它就是正确的。探讨的问题是“领域服务中能不能使用仓储？”，这个也是我之前一直纠结的地方，其实  netfocus 兄的意思我都懂得，这也是仓储设计的大前提之一，那就是职责或边界划分清楚。

后来 Luminji 兄发表了一篇博文《[面向对象架构模式之：领域模型（Domain Model）](http://www.cnblogs.com/luminji/p/3703082.html)》，看完博文内容，再看评论，你会觉得这完全没有相干性（还是有一点的），评论中主要探讨的还是仓储的归宿（调用问题），但是到评论结束，还是没有一个准确的结论，为什么？因为大家都没有去实践应用，也就是没有针对一个具体的业务场景进行探讨，比如针对某一个业务用例，把仓储的归宿放在领域服务中，那这个仓储具体该怎么设计实现？怎么调用？怎么配合领域服务完成一个具体的业务用例？应用层的代码又该是怎样的？IOC  容器怎么去注入？。。。虽然是一个“很小”的问题，实践应用过后，你会发现，其实这是一个很大的问题，当然前提是，你要去实践，去应用。

最近，Jesse Liu 兄在小组中发布了一个话题《[讨论一下领域驱动设计](http://home.cnblogs.com/group/topic/70961.html)》，我觉得这种探讨非常棒，因为大家都是针对同一个具体的业务用例，而不是各个不同的业务用例，而且这种探讨会让你学到，别人在这种业务用例下是怎么进行领域驱动设计的？不自觉会纠正你的一些错误观点，当然前提是，你不是偏执的人。

以上我所叙述的一些东西，我个人觉得都是停留在理论阶段，就像 Jesse  兄的那个话题，如果针对购物车这个业务用例，接下来的设计会是怎样？因为之前的探讨内容都是职责和边界，其实并没有去实践与应用，如果实践了，你会发现这其中的一些其他问题，“仓储的归宿”，只不过是这些问题的其中之一。

## 这样的应用层代码，你能接受吗？

言归正题，关于“仓储，你的归宿究竟在哪？”这个问题，这篇博文我想晒一下，我现在应用层的代码，业务场景还是短消息系统，业务用例是发送短消息，代码如下：

```
        public OperationResponse SendMessage(string title, string content, string senderLoginName, string receiverDisplayName)
        {
            using (IRepositoryContext repositoryContext = new EntityFrameworkRepositoryContext())
            {
                IContactRepository contactRepository = new ContactRepository();
                IMessageRepository messageRepository = new MessageRepository(repositoryContext);
                ISendMessageService sendSiteMessageService = new SendSiteMessageService();

                Contact sender = contactRepository.GetContactByLoginName(senderLoginName);
                if (sender == null)
                {
                    return OperationResponse.Error("抱歉！发送失败！错误：发件人不存在");
                }
                Contact receiver = contactRepository.GetContactByDisplayName(receiverDisplayName);
                if (receiver == null)
                {
                    return OperationResponse.Error("抱歉！发送失败！错误：收件人不存在");
                }
                try
                {
                    Message message = new Message(title, content, sender, receiver);
                    if (messageRepository.GetMessageCountByIP(System.Web.HttpContext.Current.Request.UserHostAddress) > 100)
                    {
                        return OperationResponse.Error("一天内只能发送100条短消息");
                    }
                    if (messageRepository.GetOutboxCountBySender(sender) > 20)
                    {
                        return OperationResponse.Error("1小时内只能向20个不同的用户发送短消息");
                    }
                    if (sendSiteMessageService.SendMessage(message))
                    {
                        messageRepository.Add(message);
                        return OperationResponse.Success("发送成功");
                    }
                    else
                    {
                        return OperationResponse.Error("发送失败");
                    }
                }
                catch (Exception ex)
                {
                    if (ex.GetType().Equals(typeof(ArgumentException)))
                    {
                        return OperationResponse.Error(ex.Message);
                    }
                    CNBlogs.Infrastructure.Logging.Logger.Default.Error("Application_Error: SendMessage", ex);
                    throw ex;
                }
            }
        }
```

Are you kidding me？没错，你没看错，这就是现在短消息项目中应用层中的一段代码，对于 DDD 的狂热爱好者来说，我觉得他们看到这段代码，肯定会抓狂的。。。

虽然短短几行的代码，但这其中所暴露出来的问题，实在太多了（比如仓储上下文设计、自定义异常处理、仓储的定义等等），其实我觉得你最不能接受的应该是，中间那两个发送消息之前的业务验证：

1. 一天内只能发送100条短消息。
2. 1小时内只能向20个不同的用户发送短消息。

这个是属于业务规则，怎么会放在应用层？难道我脑袋锈掉了？当然没有，这个我原来是想放在 SendSiteMessageService  领域服务中的，但是我原来的设计是领域服务中不进行仓储的调用（为了保持领域的纯洁），包含业务用例描述，所以，针对这两个业务验证，是没办法放在领域服务中的，因为这种涉及到到领域对象的读取，而所有的领域对象读取接口都设计在仓储中，领域服务想进行业务验证，又不想进行领域对象读取，你觉得可能吗？

其实这种问题，有两种解决方案：

1. SendSiteMessageService 领域服务中实现仓储的调用。
2. 领域对象的读取放在应用层中，获取之后交由领域服务进行验证。

我个人觉得，第二种实现方式只能针对一定的业务场景下，如果在业务验证过程中，又涉及到领域对象的读取，这个实现方式就有点不合理了，而且获取领域对象的操作，其实也是业务的一种体现。

代码设计是一方面，代码重构又是另一方面，后一个过程要比前一个过程困难百倍。







## [（三）－SELECT 某某某。。。](https://www.cnblogs.com/xishuai/p/3947897.html)



## 写在前面

首先，本篇博文主要包含两个主题：

1. 领域服务中使用仓储
2. SELECT 某某某（有点晕？请看下面。）

上一篇：[Repository 仓储，你的归宿究竟在哪？（二）－这样的应用层代码，你能接受吗？](http://www.cnblogs.com/xishuai/p/3934412.html)

关于仓储这个系列，很多园友问我：**为什么纠结仓储**？我觉得需要再次说明下（请不要再“纠结”了），引用上一篇博文中某一段评论的回复：

> 关于“纠结于仓储”这个问题，其实博文中我就有说明，不是说我纠结或是陷入这个问题，而是我觉得在实践领域驱动设计中，仓储的调用是一个很重要的东西，如果使用的不恰当，也许就像上面我所贴出来的应用层代码一样，我个人觉得，这是很多人在实践领域驱动设计中，很容易踩的一个坑，我只是希望可以把这个过程分享出来，给有相同困惑的人，可以借鉴一下。

## 领域服务和仓储的两种“微妙关系”

这边的“领域服务”和仓储的关系，可以理解为在领域中调用仓储，具体表现为在领域服务中使用。

在很久之前，我为了保持所谓的“领域纯洁”，在领域服务设计的时候，没有参杂仓储任何的调用，但是随着应用程序的复杂，很多业务添加进来，一个单纯的“业务描述”并不能真正去实现业务用例，所以这时候的领域服务就被“架空”了，一些业务实现“迫不得已”放在了应用层，也就是上一篇我所贴出的应用层代码，不知道你能不能接受？反正我是接受不了，所以我做了一些优化，领域服务中调用了仓储。

关于领域服务中调用仓储，在上一篇博文讨论中（czcz1024、Jesse Liu、netfocus、刘标才...），主要得出两种实现方式，这边我再大致总结下：

1. 传统方式：仓储接口定义在领域层，实现在基础层，通过规约来约束查询，一般返回类型为聚合根集合对象，如果领域对象的查询逻辑比较多，具体体现就是仓储接口变多。
2. IQueryable 方式：和上面不同的是接口的设计变少了，因为返回类型为 IQueryable，具体查询表达式的组合放在了调用层，也就是领域服务中，比如：xxxRepository.GetAll().Where(x=>....)

其实这两种方式都是一把双刃剑，关键在于自己根据具体的业务场景进行选择了，我说一下我的一些理解，比如现实生活中车库的场景，我们可以把车库看作是仓储，取车的过程看作是仓储的调用，车子的摆放根据汽车的规格，也就是仓储中的规约概念，比如我今天要开一辆德系、红色、敞篷、双门的跑车（条件有点多哈），然后我就去车库取车，在车库的“调度系统“（在仓储的具体表现，可以看作是  EF）中输入这些命令，然后一辆兰博基尼就出现在我的眼前了。

在上面描述的现实场景中，如果是第一种传统方式，“我要开一辆德系、红色、敞篷、双门的跑车”这个就可以设计为仓储的一个接口，为什么？因为车库可以换掉，而这些业务用例一般不会进行更改，车库中的“调度系统”根据命令是如何寻找汽车的呢？答案是规格的组合，也就是仓储中规约的组合，我们在针对具体业务场景设计的时候，一般会提炼出这个业务场景中的规约，这个也是不可变的，根据命令来进行对这些规约的组合，这个过车的具体体现就是仓储的实现，约束的是聚合根对象。这种方式中，我个人认为好处是可以充分利用规约，仓储的具体调用统一管理，让调用者感觉不到它是如何工作的，因为它只需要传一个命令过去，就可以得到想要的结果，唯一不好的地方就是：我心情不好，每天开的汽车都不一样，这个就要死人了，因为我要设计不同的仓储接口来进行对规约的组合。

如果是第二种方式，也就是把“调度系统”的使用权交到自己手里（第一种的这个过程可以看作是通过秘书），这种方式的好与坏，我就不多说了，我现在使用的是第一种方式，主要有两个原因：

1. 防止 IQueryable 的滥用（领域服务非常像 DAL）。
2. 现在应用场景中的查询比较少，没必要。

上一篇博文中贴出的是，发送短消息的应用层代码，发送的业务验证放在了应用层，以致于 SendSiteMessageService.SendMessage 中只有一段“return true”代码，修改之后的领域服务代码：

```
    public class SendSiteMessageService : ISendMessageService
    {
        public async Task<bool> SendMessage(Message message)
        {
            IMessageRepository messageRepository = IocContainer.Resolver.Resolve<IMessageRepository>();
            if (message.Type == MessageType.Personal)
            {
                if (System.Web.HttpContext.Current != null)
                {
                    if (await messageRepository.GetMessageCountByIP(Util.GetUserIpAddress()) > 100)
                    {
                        throw new CustomMessageException("一天内只能发送100条短消息");
                    }
                }
                if (await messageRepository.GetOutboxCountBySender(message.Sender) > 20)
                {
                    throw new CustomMessageException("1小时内只能向20个不同的用户发送短消息");
                }
            }
            return true;
        }
    }
```

代码就是这样，如果你觉得有问题，欢迎提出，我再进行修改。

这边再说一下领域服务中仓储的注入，缘由是我前几天看了刘标才的一篇博文：[DDD领域驱动设计之领域服务](http://www.cnblogs.com/liubiaocai/p/3938259.html)，文中对仓储的注入方式是通过构造函数，这种方式的坏处就是领域服务对仓储产生强依赖关系，还有就是如果领域服务中注入了多个仓储，调用这个领域服务中的某一个方法，而这个方法只是使用了一个仓储，那么在对这个领域服务进行注入的时候，就必须把所有仓储都要进行注入，这就没有必要了。

解决上面的问题的方式就是，在使用仓储的地方对其进行解析，比如：`IocContainer.Resolve<IMessageRepository>();`，这样就可以避免了上面的问题，我们还可以把仓储的注入放在 Bootstrapper 中，也就是项目启动的地方。

## SELECT 某某某

上面所探讨的都是仓储的调用，而现在这个问题是仓储的实现，这是两种不同的概念。

什么是“SELECT  某某某”？答案就是针对字段进行查询，场景为应用程序的性能优化。我知道你看到“SELECT”就想到了事务脚本模式，不要想歪了哦，你眼中的仓储实现不一定是  ORM，也可以是传统的 ADO.NET，如果仓储实现使用的是数据库持久化机制，其实再高级的 ORM，到最后都会转换成 SQL  代码，具体表现就是对这些代码的优化，似乎不属于领域驱动设计的范畴了，但不可否认，这是应用程序不能不考虑的。

### 应用程序中的性能问题

我说一下现在短消息项目中仓储的实现（常用场景）：底层使用的是 EntityFramework，为了更好的理解，我贴一段查询代码：

```
        protected override async Task<IEnumerable<TAggregateRoot>> FindAll(ISpecification<TAggregateRoot> specification, System.Linq.Expressions.Expression<Func<TAggregateRoot, dynamic>> sortPredicate, SortOrder sortOrder, int pageNumber, int pageSize)
        {
            var query = efContext.Context.Set<TAggregateRoot>()
                .Where(specification.GetExpression());
            int skip = (pageNumber - 1) * pageSize;
            int take = pageSize;

            if (sortPredicate != null)
            {
                switch (sortOrder)
                {
                    case SortOrder.Ascending:
                        return query.SortBy(sortPredicate).Skip(skip).Take(take).ToListAsync();
                    case SortOrder.Descending:
                        return query.SortByDescending(sortPredicate).Skip(skip).Take(take).ToListAsync();
                    default:
                        break;
                }
            }
            return query.Skip(skip).Take(take).ToListAsync();
        }
```

这种方式有什么问题吗？至少在我们做一些 DDD 示例的时候，没有任何问题，为什么？因为你没有实际去应用，也就体会不到一些问题，前一段时间短消息页面加载慢，一个是数据库索引问题（详见：[程序员眼中的 SQL Server－执行计划教会我如何创建索引？](http://www.cnblogs.com/xishuai/p/sql-server-clustered-index-order-by.html)），还有一个就是消息列表查询的时候，把消息表的所有字段都取出来了，这是完全没有必要的，比如消息内容就不需要进行读取，但是我们在跟踪上面代码执行的时候，会发现 EntityFramework 生成的 SQL 代码为 SELECT *。。。

### 走过的弯路

上面这个问题，至少从那个数据库索引问题解决完，我就一直郁闷着，也尝试着用各种方式去解决，比如创建 IQueryable 的 Select  表达式，传入的是自定义的聚合根属性，还有就是扩展 Select 表达式，详细过程就不回首了，我贴一下当时在搜索时的一些资料：

- [IQueryable C# Select](http://173.194.64.84/#newwindow=1&q=iqueryable+select+)
- [The entity cannot be constructed in a LINQ to Entities query](http://stackoverflow.com/questions/5325797/the-entity-cannot-be-constructed-in-a-linq-to-entities-query)
- [Cannot  implicitly convert type 'System.Collections.Generic.IEnumerable' to  'System.Collections.Generic.List'. An explicit conversion exists (are  you missing a cast?)](http://www.codeproject.com/Questions/508248/Cannotplusimplicitlyplusconvertplustypeplus-Syst)
- [Cannot implicitly convert type ‘System.Linq.IQueryable’ to ‘System.Collections.Generic.IEnumerable’](http://stackoverflow.com/questions/22550278/cannot-implicitly-convert-type-system-linq-iqueryableanonymoustype1-to-sys)
- [Cannot  implicitly convert type  'System.Collections.Generic.List' to  'System.Collections.Generic.IEnumerable](http://stackoverflow.com/questions/16645626/cannot-implicitly-convert-type-system-collections-generic-listanonymoustype1)
- [使用Entity Framework时要注意的一些性能问题](http://diaosbook.com/Post/2012/12/9/performance-issue-in-select-one-or-few-colums-via-entityframework)
- 不记得了...

在 EntityFramework 底层，我们 Get 查询的时候，一般都是返回 TAggregateRoot 聚合根集合对象，也就是说，你没有办法在底层进行指定属性查询，因为聚合根只有 ID 一个属性，唯一的办法就是传入 `Expression<Func<TAggregateRoot, TAggregateRoot>> selector`  表达式，select 两个范型约束为 TSource 和 TDest，这边我们两种类型都为 TAggregateRoot  ，但是执行结果为：“The entity or complex type ... cannot be constructed in a LINQ  to Entities query.”，给我的教训就是 Select 中的 TSource 和 TDest  不能为同一类型（至少指定属性的情况下）。

### 我的解决方案

EntityFramework 底层的所有查询返回类型改为 `IQueryable<TAggregateRoot>`，仓储的查询返回类型改为 `IEnumerable<MessageListDTO>`，为什么是  MessageListDTO 而不是 Message？因为我觉得消息列表的显示，就是对消息的扁平化处理，没必要是一个 Message  实体对象，虽然它是一个消息实体仓储，就好比从车库中取出一个所有汽车列表的单子，有必要把所有汽车实体取出来吗？很显然没有必要，我们只需要取出汽车的一些信息即可，我觉得这是应对业务场景变化所必须要调整的，具体的实现代码：

```
        public async Task<IEnumerable<MessageListDTO>> GetInbox(Contact reader, PageQuery pageQuery)
        {
            return await GetAll(new InboxSpecification(reader), sp => sp.ID, SortOrder.Descending, pageQuery.PageIndex, pageQuery.PageSize)
                 .Project().To<MessageListDTO>()
                 .ToListAsync();
        }
```

“Project().To()” 是什么东西？这是 AutoMapper 对 IQueryable 表达式的一个扩展，详情请参阅：[恋爱虽易，相处不易：当 EntityFramework 爱上 AutoMapper](http://www.cnblogs.com/xishuai/p/3712361.html)，AutoMapper 扩展说明：[Queryable Extensions](https://github.com/AutoMapper/AutoMapper/wiki/Queryable-Extensions)，简单的一段代码就可以完成实体与 DTO 之间的转化，我们再次用 SQL Server Profiler 捕获生成的 SQL 代码，就会发现，这就是我们想要的，根据映射配置 Select 指定字段查询。

## 写在最后

![img](010019362668235.png)

针对“SELECT 某某某”这个实际应用问题，以上只是我的个人实现方式，如果你有疑问或是有更好的实现，欢迎指教。。。